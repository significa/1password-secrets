import argparse
import json
import subprocess
import sys
import tempfile
from datetime import datetime
from io import StringIO

from dotenv import dotenv_values
from sgqlc.endpoint.http import HTTPEndpoint

FLY_GRAPHQL_ENDPOINT = 'https://api.fly.io/graphql'


def get_1password_env_file_item_id(app_id):
    secure_notes = json.loads(
        subprocess.check_output(
            ['op', 'item', 'list', '--categories',
                'Secure Note', '--format', 'json']
        )
    )

    item_id = next(
        (
            item['id']
            for item in secure_notes
            if f'fly:{app_id}' in item['title']
        ),
        None
    )

    if item_id is None:
        print(f'There is no env file in 1password with a name containing `fly.{app_id}`')
        raise RuntimeError()

    return item_id


def get_envs_from_1password(item_id):
    item = json.loads(
        subprocess.check_output(
            ['op', 'item', 'get', item_id, '--format', 'json']
        )
    )

    return next(
        field['value']
        for field in item['fields']
        if field['id'] == 'notesPlain'
    )


def get_fly_auth_token():
    return json.loads(
        subprocess.check_output(['fly', 'auth', 'token', '--json'])
    )['token']


def update_fly_secrets(app_id, secrets):
    set_secrets_mutation = """
    mutation(
        $appId: ID!
        $secrets: [SecretInput!]!
        $replaceAll: Boolean!
    ) {
        setSecrets(
            input: {
                appId: $appId
                replaceAll: $replaceAll
                secrets: $secrets
            }
        ) {
            app {
                name
            }
            release {
                version
            }
        }
    }
    """

    secrets_input = [
        {'key':  key, 'value': value}
        for key, value in secrets.items()
    ]
    variables = {
        'appId': app_id,
        'secrets': secrets_input,
        'replaceAll': True
    }

    print(variables)

    headers = {'Authorization': f'Bearer {get_fly_auth_token()}'}

    endpoint = HTTPEndpoint(
        FLY_GRAPHQL_ENDPOINT,
        headers
    )

    response = endpoint(
        query=set_secrets_mutation,
        variables=variables
    )

    if response.get('errors') is not None:
        for error in response['errors']:
            print(error['message'])

        raise RuntimeError()
    else:
        print(
            f'Releasing fly app {app_id}'
            f' version {response["data"]["setSecrets"]["release"]["version"]}'
        )


def update_1password_secrets(item_id, content):
    subprocess.check_output([
        'op',
        'item',
        'edit',
        item_id,
        f'notesPlain={content}'
    ])


def update_1password_custom_fields(item_id, field, value):
    subprocess.check_output([
        'op',
        'item',
        'edit',
        item_id,
        f'Generated by fly secrets.{field}[text]={value}',
        '--format',
        'json'
    ])



def get_secrets_from_envs(input: str):
    return dotenv_values(stream=StringIO(input))


def import_1password_secrets_to_fly(app_id):
    item_id = get_1password_env_file_item_id(app_id)

    secrets = get_secrets_from_envs(get_envs_from_1password(item_id))

    update_fly_secrets(app_id, secrets)

    now_formatted = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    update_1password_custom_fields(
        item_id,
        'last imported at',
        now_formatted
    )


def edit_1password_secrets(app_id):
    item_id = get_1password_env_file_item_id(app_id)

    if item_id is None:
        print(f'There is no env file in 1password with a name containing `fly.{app_id}`')
        raise RuntimeError()
    
    secrets = get_envs_from_1password(item_id)

    with tempfile.NamedTemporaryFile('w+') as file:
        file.writelines(secrets)
        file.flush()
        subprocess.check_output(['code', '--wait', file.name])

        file.seek(0)
        output = file.read()

    if secrets == output:
        # FIXME:
        print("Secrets did not change")
        return
    
    update_1password_secrets(item_id, output)

    now_formatted = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    update_1password_custom_fields(
        item_id,
        'last edited at',
        now_formatted
    )

    user_input=""
    while user_input.lower() not in ['y', 'n']:
        user_input = input(
            'Secrets updated in 1password, do you want to import secrets to fly (y/n)?\n'
            )
    
    if user_input.lower() == 'y':
        import_1password_secrets_to_fly(app_id)


def main():
    parser = argparse.ArgumentParser(
        description='1pasword-secrets is a set of utilities to sync 1Password secrets.'
    )
    subparsers = parser.add_subparsers(dest="subcommand")
    
    fly_parser = subparsers.add_parser('fly', help='manage fly secrets')
    fly_parser.add_argument('action', type=str, choices=['import', 'edit'])
    fly_parser.add_argument('app_name', type=str, help='fly application name')

    args = parser.parse_args()

    try:
        if args.subcommand == 'fly':
            if args.action == 'import':
                import_1password_secrets_to_fly(args.app_name)
            elif args.action == 'edit':
                edit_1password_secrets(args.app_name)
    except Exception:
        sys.exit(1)

if __name__ == '__main__':
    main()
